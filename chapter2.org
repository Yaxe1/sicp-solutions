#+title: Chapter 2 - Building Abstractions with Data

* Utility functions

#+begin_src scheme :session chapter2
(define (displayln object)
  (display object)
  (newline))

(define (displayln-all . objects)
  (for-each displayln objects))
#+end_src

#+RESULTS:
: #<unspecified>

* Section 2.1 - Introduction to Data Abstractions
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.1][Exercise 2.1]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (gcd a b)
  (if [= b 0]
      a
      (gcd b (remainder a b))))

(define (make-rat n d)
  (if (< d 0)
      (make-rat (- n) (- d))
      (cons n d)))

; Tests
(make-rat 5 4)
(make-rat -5 -4)
(make-rat 1 -2)
#+end_src

#+RESULTS:
: (5 . 4)
: (5 . 4)
: (-1 . 2)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.2][Exercise 2.2]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment start end) (cons start end))

(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (midpoint-segment s)
  (make-point (/ (+ (x-point (start-segment s)) (x-point (end-segment s))) 2)
              (/ (+ (y-point (start-segment s)) (y-point (end-segment s))) 2)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))

; Tests
(print-point (midpoint-segment (make-segment (make-point 0 0) (make-point 2 2))))
#+end_src

#+RESULTS:
:
: (1, 1)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.3][Exercise 2.3]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (rect w h) ; two corners
  (cons w h))

(define (width r) (car r))
(define (height r) (cdr r))

(define (area r)
  (* (width r) (height r)))

(define (perimeter r)
  (+ (* 2 (width r)) (* 2 (height r))))
#+end_src

Alternative representation using points

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (rect p1 p2))
(define (bottom-left r) (car r))
(define (top-right r) (cdr r))

(define (width r)
  (- (x-point (top-right r)) (x-point (bottom-left r))))

(define (height r)
  (- (y-point (top-right r)) (y-point (bottom-left r))))

; Same definitions
(define (area r)
  (* (width r) (height r)))

(define (perimeter r)
  (+ (* 2 (width r)) (* 2 (height r))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.4][Exercise 2.4]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

; Solution
(define (cdr z)
  (z (lambda (p q) q)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.5][Exercise 2.5]]

Note that 2 and 3 are coprime, thus for each a and b there exists some unique value of 2^a * 3^b

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (cons a b) (* (expt 2 a) (expt 3 b)))
; TODO
#+end_src

** Exercise 2.6
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.6][Exercise 2.6]]

Substituting the definition of =zero= into =add-1=, we get
#+begin_src racket :lang sicp  :session  :results output  :exports both
(define zero (lambda (g) (lambda (y) y)))

(define one
  (lambda (f)
    (lambda (x)
      (f (((lambda (g) (lambda (y) y)) f) x)))))
#+end_src

TODO addition

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.7][Exercise 2.7]]
** Exercise 2.7

Choosing to employ =min= and =max= instead of relying on the ordering

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-interval a b) (cons a b))

(define (lower-bound i) (min (car i) (cdr i)))
(define (upper-bound i) (max (car i) (cdr i)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.8][Exercise 2.8]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.9][Exercise 2.9]]

Consider intervals =a= and =b=. The width of their sum =(add-interval a b)= is
#+begin_src racket :lang sicp
(/ (- (+ (upper-bound a) (upper-bound b))
      (+ (lower-bound a) (lower-bound b)))
   2)
#+end_src

Rearranging the terms, we get
#+begin_src racket :lang sicp
(+ (/ (- (upper-bound a) (lower-bound a))
      2)
   (/ (- (upper-bound b) (lower-bound b))
      2))

(+ (width a) (width b))
#+end_src

TODO examples for multiplication

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.10][Exercise 2.10]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.11][Exercise 2.11]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.12][Exercise 2.12]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-center-percent center percent) (cons center percent))

(define (center x) (car x))
(define (percent x) (cdr x))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.13][Exercise 2.13]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.14][Exercise 2.14]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.15][Exercise 2.15]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.16][Exercise 2.16]]

* Section 2.2 - Hierarchical Data and the Closure Property

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.17][Exercise 2.17]]

#+begin_src racket :lang sicp  :session ch2 :results output  :exports both
(define (last-pair items)
  (if (null? (cdr items))
      items
      (last-pair (cdr items))))

; Tests
(last-pair (list 23 72 149 34))
#+end_src

#+RESULTS:
: (34)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.18][Exercise 2.18]]

We can reverse the list in a single pass by growing it "backwards"

(a (b (c))) -> ()
(b (c)) -> (a)
(c) -> (b (a))
() -> (c (b (a)))

#+begin_src racket :lang sicp  :session ch2 :results output  :exports both
(define (reverse items)
  (define (reverse-iter items reversed)
    (if (null? items)
        reversed
        (reverse-iter (cdr items) (cons (car items) reversed))))
  (reverse-iter items '()))

(reverse (list 1 2 3))
#+end_src

#+RESULTS:
: (3 2 1)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.19][Exercise 2.19]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (cc amount coin-values)
        (cond [(= amount 0) 1]
              [(or (< amount 0) (no-more? coin-values)) 0]
              [else
               (+ (cc amount
                      (except-first-denomination coin-values))
                  (cc (- amount
                         (first-denomination coin-values))
                      coin-values))]))

(define (no-more? coin-values)
  (null? coin-values))

(define (first-denomination coin-values)
  (car coin-values))

(define (except-first-denomination coin-values)
  (cdr coin-values))

; Tests
(define us-coins (list 50 25 10 5 1))
(cc 100 us-coins)
#+end_src

#+RESULTS:
: 292

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.20][Exercise 2.20]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (same-parity z0 . z)
  (define (same-parity-iter z)
    (cond [(null? z) z]
          [(= (modulo z0 2) (modulo (car z) 2)) (cons (car z) (same-parity-iter (cdr z)))]
          [else (same-parity-iter (cdr z))]))
  (cons z0 (same-parity-iter z)))

; Tests
(same-parity 1 2 3 4 5 6 7)
(same-parity 2 3 4 5 6 7)
#+end_src

#+RESULTS:
: (1 3 5 7)
: (2 4 6)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.21][Exercise 2.21]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

(define (square-list items)
  (if (null? items)
      nil
      (cons (square (car items)) (square-list (cdr items)))))

; Tests
(square-list (list 1 2 3 4 5))
#+end_src

#+RESULTS:
: (1 4 9 16 25)

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

(define (square-list items)
  (map square items))

; Tests
(square-list (list 1 2 3 4 5))
#+end_src

#+RESULTS:
: (1 4 9 16 25)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.22][Exercise 2.22]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

; From the text
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (square (car things))
                    answer))))
  (iter items nil))

; Tests
(square-list (list 1 2 3 4 5))
#+end_src

#+RESULTS:
: (25 16 9 4 1)

Let's step through this procedure with the test input =(list 1 2 3)=.

#+begin_src racket :lang sicp
(square-list '(1 2 3))
(iter '(1 2 3) nil)
(iter (cdr '(1 2 3)) (cons (square (car '(1 2 3))) nil)) -> (iter '(2 3) (cons (square 1) nil)) -> (iter '(2 3) '(1))
(iter (cdr '(2 3)) (cons (square (car '(2 3))) '(1))) -> (iter '(3) (cons (square 2) '(1))) -> (iter '(3) '(4 1))
(iter (cdr '(3)) (cons (square (car '(3))) '(4 1))) -> (iter nil (cons (square 3) '(4 1))) -> (iter nil '(9 4 1))
'(9 4 1)
#+end_src

Louis Reasoner is building his list "backwards" like our reverse function.
Reversing the order of the arguments to =cons= won't work, since =(cons nil ...)= does not produce a useful list.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.23][Exercise 2.23]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (for-each procedure items)
  (if (null? items)
      nil
      (begin (procedure (car items)) (for-each procedure (cdr items)))))

; Tests
(for-each (lambda (x) (newline) (display x))
          (list 57 321 88))
#+end_src

#+RESULTS:
:
: 57
: 321
: 88()

I don't know how to get rid of the nil value in the output.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.24][Exercise 2.24]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(list 1 (list 2 (list 3 4)))
#+end_src

#+RESULTS:
: (1 (2 (3 4)))

Not drawing the box and pointer structure.

#+begin_src
1
 \
  2
 / \
3   4
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.25][Exercise 2.25]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define a '(1 3 (5 7) 9))
(define b '((7)))
(define c '(1 (2 (3 (4 (5 (6 7)))))))

(car (cdr (car (cdr (cdr a)))))
(car (car b))
(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr c))))))))))))
#+end_src

#+RESULTS:
: 7
: 7
: 7

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.26][Exercise 2.26]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y)
(cons x y)
(list x y)
#+end_src

#+RESULTS:
: (1 2 3 4 5 6)
: ((1 2 3) 4 5 6)
: ((1 2 3) (4 5 6))

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.27][Exercise 2.27]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (deep-reverse items)
  (define (reverse-iter items reversed)
    (if (null? items)
        reversed
        (reverse-iter
         (cdr items)
         (cons (if [list? (car items)]
                   (deep-reverse (car items))
                   (car items))
               reversed))))
  (reverse-iter items '()))

(deep-reverse '((1 2) (3 4)))
#+end_src

#+RESULTS:
: ((4 3) (2 1))

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.28][Exercise 2.28]]

|       Subtree | Leaves    |
|---------------+-----------|
| ((1 2) (3 4)) | nil       |
|         (1 2) | nil       |
|             1 | (1)       |
|             2 | (1 2)     |
|         (3 4) | (1 2)     |
|             3 | (1 2 3)   |
|             4 | (1 2 3 4) |

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (fringe tree)
  (cond [(not (pair? tree)) tree]
        [(not (pair? (car tree))) (cons (car tree) (fringe (cdr tree)))]
        [else (append (fringe (car tree)) (fringe (cdr tree)))]))

(define x (list (list 1 2) (list 3 4)))
(fringe x)
(fringe (list x x))
#+end_src

#+RESULTS:
: (1 2 3 4)
: (1 2 3 4 1 2 3 4)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.29][Exercise 2.29]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-mobile left right)
  (list left right))

(define (make-branch length structure)
  (list length structure))

; Part A
(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (car (cdr mobile)))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (car (cdr branch)))

; Part B

(define (total-weight mobile)
  (define (branch-weight branch)
    (cond [(number? (branch-structure branch)) (branch-structure branch)]
          [else (total-weight (branch-structure branch))]))
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))

; Part C
(define (torque branch distance)
  (cond [(null? branch)
         nil]
        [(number? (branch-structure branch))
         (* (branch-structure branch) distance)]
        [else
         (let ([left (left-branch (branch-structure branch))]
               [right (right-branch (branch-structure branch))])
           (- (torque left (- distance (branch-length left)))
              (torque right (+ distance (branch-length right)))))]))

(define (mobile-balanced? mobile)
  (= (torque (left-branch mobile) (- (branch-length (left-branch mobile))))
     (torque (right-branch mobile) (branch-length (right-branch mobile)))))
; Tests
(total-weight (make-mobile (make-branch 1 2) (make-branch 3 4)))
(total-weight (make-mobile (make-branch 1 (make-mobile (make-branch 1 2) (make-branch 3 4))) (make-branch 5 6)))

(define x0 (make-branch 0 1))
(define x1 (make-branch 1 1))
(define x2 (make-branch 1 (make-mobile (make-branch 1 1)
                                       (make-branch 1 1))))

(torque x0 0)
(torque x1 1)
(torque x2 1)

(mobile-balanced? (make-mobile x0 x0))
(mobile-balanced? (make-mobile x0 x1))
#+end_src

#+RESULTS:
: 6
: 12
: 0
: 1
: -2
: #t
: #f

For part D, I would just have to reimplement the selector procedures.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.30][Exercise 2.30]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

(define (square-tree tree)
  (map (lambda (sub-tree)
         (if [pair? sub-tree]
             (square-tree sub-tree)
             (square sub-tree)))
       tree))

; Tests
(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
#+end_src

#+RESULTS:
: (1 (4 (9 16) 25) (36 49))

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.31][Exercise 2.31]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (tree-map procedure tree)
  (map (lambda (sub-tree)
         (if [pair? sub-tree]
             (tree-map procedure sub-tree)
             (procedure sub-tree)))
       tree))

(define (square x) (* x x))
(define (square-tree tree) (tree-map square tree))

; Tests
(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
#+end_src

#+RESULTS:
: (1 (4 (9 16) 25) (36 49))

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.32][Exercise 2.32]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map )))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.33][Exercise 2.33]]

#+begin_src scheme :session chapter2 :results output
; From the text
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) '() sequence))

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(define (length sequence)
  (accumulate (lambda (x y) (+ y 1)) 0 sequence))

; Tests
(displayln-all
 (map (lambda (x) (* x x)) (list 1 2 3))
 (append (list 1 2 3) (list 4 5 6))
 (length (list 1 2 3 4 5)))

; Rebind old procedure definitions
(set! map (module-ref (resolve-module '(scheme base)) 'map))
(set! append (module-ref (resolve-module '(scheme base)) 'append))
(set! length (module-ref (resolve-module '(scheme base)) 'length))
#+end_src

#+RESULTS:
: (1 4 9)
: (1 2 3 4 5 6)
: 5

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.34][Exercise 2.34]]

#+begin_src scheme :session chapter2 :results output
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* higher-terms x)))
              0
              coefficient-sequence))

(displayln-all
 (horner-eval 2 (list 1 3 0 5 0 1)))
#+end_src

#+RESULTS:
: 79

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.35][Exercise 2.35]]

#+begin_src scheme :session chapter2 :results output
(define (count-leaves t)
  (accumulate +
              0
              (map (lambda (node)
                     (if (pair? node)
                         (count-leaves node)
                         1))
                   t)))
#+end_src

#+RESULTS:

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.36][Exercise 2.36]]

This reminds me of Python's [[https://docs.python.org/3/library/functions.html#zip][zip()]] builtin

#+begin_src scheme :session chapter2 :results output
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

; Tests
(define s '((1 2 3) (4 5 6) (7 8 9) (10 11 12)))

(displayln-all
 (accumulate-n + 0 s))
#+end_src

#+RESULTS:
: (22 26 30)

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.37][Exercise 2.37]]

#+begin_src scheme :session chapter2 :results output
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(define (transpose mat)
  (accumulate-n cons '() mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row)
           (map (lambda (col)
                  (dot-product row col))
                cols))
         m)))

; Tests
(displayln-all
 (dot-product '(1 2 3) '(4 5 6))
 (matrix-*-vector '((1 2 3)
                    (4 5 6)
                    (7 8 9))
                  '(1 2 3))
 (transpose '((1 2 3)
              (4 5 6)
              (7 8 9)))
 (matrix-*-matrix '((2 0 0)
                    (0 2 0)
                    (0 0 2))
                  '((1 2 3)
                    (4 5 6)
                    (7 8 9)))
)
#+end_src

#+RESULTS:
: 32
: (14 32 50)
: ((1 4 7) (2 5 8) (3 6 9))
: ((2 4 6) (8 10 12) (14 16 18))

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.38][Exercise 2.38]]

#+begin_src scheme :session chapter2 :results output
(use-modules (srfi srfi-1))
(displayln-all
 (fold-right / 1 (list 1 2 3))
 (fold / 1 (list 1 2 3))
 (fold-right list '() (list 1 2 3))
 (fold list '() (list 1 2 3))
)
#+end_src

#+RESULTS:
: 3/2
: 3/2
: (1 (2 (3 ())))
: (3 (2 (1 ())))

What property should =op= have? TODO revisit this

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.39][Exercise 2.39]]

#+begin_src scheme :results output
(use-modules (srfi srfi-1))
#+end_src

#+RESULTS:

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.40][Exercise 2.40]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.41][Exercise 2.41]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.42][Exercise 2.42]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.43][Exercise 2.43]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.44][Exercise 2.44]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.45][Exercise 2.45]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.46][Exercise 2.46]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.47][Exercise 2.47]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.48][Exercise 2.48]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.49][Exercise 2.49]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.50][Exercise 2.50]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.51][Exercise 2.51]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.52][Exercise 2.52]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.53][Exercise 2.53]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.54][Exercise 2.54]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.55][Exercise 2.55]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.56][Exercise 2.56]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.57][Exercise 2.57]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.58][Exercise 2.58]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.59][Exercise 2.59]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.60][Exercise 2.60]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.61][Exercise 2.61]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.62][Exercise 2.62]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.63][Exercise 2.63]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.64][Exercise 2.64]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.65][Exercise 2.65]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.66][Exercise 2.66]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.67][Exercise 2.67]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.68][Exercise 2.68]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.69][Exercise 2.69]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.70][Exercise 2.70]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.71][Exercise 2.71]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.72][Exercise 2.72]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.73][Exercise 2.73]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.74][Exercise 2.74]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.75][Exercise 2.75]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.76][Exercise 2.76]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.77][Exercise 2.77]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.78][Exercise 2.78]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.79][Exercise 2.79]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.80][Exercise 2.80]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.81][Exercise 2.81]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.82][Exercise 2.82]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.83][Exercise 2.83]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.84][Exercise 2.84]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.85][Exercise 2.85]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.86][Exercise 2.86]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.87][Exercise 2.87]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.88][Exercise 2.88]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.89][Exercise 2.89]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.90][Exercise 2.90]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.91][Exercise 2.91]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.92][Exercise 2.92]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.93][Exercise 2.93]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.94][Exercise 2.94]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.95][Exercise 2.95]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-18.html#%_thm_2.96][Exercise 2.96]]
