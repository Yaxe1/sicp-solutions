#+title: Chapter 2 - Building Abstractions with Data

* Section 2.1 - Introduction to Data Abstractions
** Exercise 2.1

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (gcd a b)
  (if [= b 0]
      a
      (gcd b (remainder a b))))

(define (make-rat n d)
  (if (< d 0)
      (make-rat (- n) (- d))
      (cons n d)))

; Tests
(make-rat 5 4)
(make-rat -5 -4)
(make-rat 1 -2)
#+end_src

#+RESULTS:
: (5 . 4)
: (5 . 4)
: (-1 . 2)

** Exercise 2.2

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment start end) (cons start end))

(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (midpoint-segment s)
  (make-point (/ (+ (x-point (start-segment s)) (x-point (end-segment s))) 2)
              (/ (+ (y-point (start-segment s)) (y-point (end-segment s))) 2)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))

; Tests
(print-point (midpoint-segment (make-segment (make-point 0 0) (make-point 2 2))))
#+end_src

#+RESULTS:
:
: (1, 1)

** Exercise 2.3

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (rect w h) ; two corners
  (cons w h))

(define (width r) (car r))
(define (height r) (cdr r))

(define (area r)
  (* (width r) (height r)))

(define (perimeter r)
  (+ (* 2 (width r)) (* 2 (height r))))
#+end_src

Alternative representation using points

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (rect p1 p2))
(define (bottom-left r) (car r))
(define (top-right r) (cdr r))

(define (width r)
  (- (x-point (top-right r)) (x-point (bottom-left r))))

(define (height r)
  (- (y-point (top-right r)) (y-point (bottom-left r))))

; Same definitions
(define (area r)
  (* (width r) (height r)))

(define (perimeter r)
  (+ (* 2 (width r)) (* 2 (height r))))
#+end_src

** Exercise 2.4

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

; Solution
(define (cdr z)
  (z (lambda (p q) q)))
#+end_src

** Exercise 2.5

Note that 2 and 3 are coprime, thus for each a and b there exists some unique value of 2^a * 3^b

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (cons a b) (* (expt 2 a) (expt 3 b)))
; TODO
#+end_src

** Exercise 2.6

Substituting the definition of =zero= into =add-1=, we get
#+begin_src racket :lang sicp  :session  :results output  :exports both
(define zero (lambda (g) (lambda (y) y)))

(define one
  (lambda (f)
    (lambda (x)
      (f (((lambda (g) (lambda (y) y)) f) x)))))
#+end_src

TODO addition

** Exercise 2.7

Choosing to employ =min= and =max= instead of relying on the ordering

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-interval a b) (cons a b))

(define (lower-bound i) (min (car i) (cdr i)))
(define (upper-bound i) (max (car i) (cdr i)))
#+end_src

** Exercise 2.8

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))
#+end_src
** Exercise 2.9

Consider intervals =a= and =b=. The width of their sum =(add-interval a b)= is
#+begin_src racket :lang sicp
(/ (- (+ (upper-bound a) (upper-bound b))
      (+ (lower-bound a) (lower-bound b)))
   2)
#+end_src

Rearranging the terms, we get
#+begin_src racket :lang sicp
(+ (/ (- (upper-bound a) (lower-bound a))
      2)
   (/ (- (upper-bound b) (lower-bound b))
      2))

(+ (width a) (width b))
#+end_src

TODO examples for multiplication

** Exercise 2.10

** Exercise 2.11

** Exercise 2.12
#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (make-center-percent center percent) (cons center percent))

(define (center x) (car x))
(define (percent x) (cdr x))
#+end_src

** Exercise 2.13

** Exercise 2.14

** Exercise 2.15

** Exercise 2.16

* Section 2.2 - Hierarchical Data and the Closure Property

** Exercise 2.17

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (last-pair l)
  (if (null? (cdr l))
      l
      (last-pair (cdr l))))

; Tests
(last-pair (list 23 72 149 34))
#+end_src

#+RESULTS:
: (34)

** Exercise 2.18

#+begin_src racket :lang sicp  :session  :results output  :exports both
#+end_src
