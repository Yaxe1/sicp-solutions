#+TITLE: Chapter 1 - Build Abstractions with Procedures

* Section 1.1 - The Elements of Programming
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.1][Exercise 1.1]]

#+begin_src racket :lang sicp :session :results output :exports both
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
a
b
19
#f
4
16
6
16
#+end_example

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.2][Exercise 1.2]]
It helps to draw the expression tree out on a sheet of paper.

#+begin_src racket :lang sicp
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.3][Exercise 1.3]]

#+begin_src racket :lang sicp
; Defined in section 1.1.4:
(define (square x) (* x x))
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (sum-of-squares-of-two-largest x y z)
  (cond ((and (>= y x) (>= z x)) (sum-of-squares y z))
        ((and (>= x y) (>= z y)) (sum-of-squares x z))
        ((and (>= x z) (>= y z)) (sum-of-squares x y))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.4][Exercise 1.4]]
The body of this procedure is a combination whose operator is itself an
if-statement. If b > 0, the operator will be "+". Otherwise, it will be "-", in
this way ensuring that a is summed with the absolute value of b.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.5][Exercise 1.5]]
An interpreter using applicative-order evaluation will hang in an infinite
loop, since the arguments to =test= will be evaluated first and =p= is
infinitely recursive.

On the other hand, a normal-order evaluation would evaluate to =0=, because
=p= doesn't get invoked unless the predicate in the =if= statement is false.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.6][Exercise 1.6]]
This new-if procedure is not a special form but rather a procedure call, and
therefore all of the arguments will be evaluated first before they are passed
to =cond=. This means that the predicate is ignored and the new =sqrt-iter=
procedure will call itself recursively forever.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.7][Exercise 1.7]]
"Limited precision" in this context means that we are using a finite amount of
bits to represent a real number with a potentially infinite decimal
representation. IEEE floating point arithmetic is defined as real-number
arithmetic truncated to the closest representable float, introducing errors in
calculations.

#+begin_src racket :lang sicp
(define (square x) (* x x))

(define (average x y)
    (/ (+ x y) 2))

(define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

(define (improve guess x)
    (average guess (/ x guess)))

(define epsilon 1e-10)
(define (good-enough? guess x)
    (< (abs (- guess (improve guess x)))
        (* guess epsilon)))

(define (sqrt x)
    (sqrt-iter 1.0 x))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.8][Exercise 1.8]]

#+begin_src racket :lang sicp
(define (square x) (* x x))

(define (cube-root x)
    (cube-root-iter 1.0 x))

(define (cube-root-iter guess x)
    (if (good-enough? guess x)
        guess
        (cube-root-iter (improve guess x) x)))

; From exercise 1.7
(define epsilon 1e-20)
(define (good-enough? guess x)
    (< (abs (- guess (improve guess x)))
        (* guess epsilon)))

(define (improve guess x)
    (/ (+ (/ x (square guess)) (* 2 guess)) 3))
#+end_src

* Section 1.2 - Procedures and the Processes They Generate

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.9][Exercise 1.9]]

#+begin_src racket :lang sicp
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7)
(inc 8)
9

(+ 4 5)
(+ (dec 4) (inc 5))
(+ (dec 3) (inc 6))
(+ (dec 2) (inc 7))
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.10][Exercise 1.10]]

#+begin_src racket :lang sicp
(A 1 10)
; 1024

(A 2 4)
; 65536

(A 3 3)
; 65536

; f(n) = 2n
; g(n) = 2^n
; h(n) = { n = 0: 0; otherwise 2^h(n-1) }
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.11][Exercise 1.11]]

#+begin_src racket :lang sicp
(define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1))
           (* 2 (f (- n 2)))
           (* 3 (f (- n 3))))))
#+end_src

Like in =fib-iter=, we can use variables to keep track of our running state.

#+begin_src racket :lang sicp
(define (g n)
  (define (g-iter i a b c)
    (if (= i n)
        c
        (g-iter (+ i 1) b c (+ c (* 2 b) (* 3 a)))))
  (if (< n 3)
      n
      (g-iter 2 0 1 2)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.12][Exercise 1.12]]

#+begin_src racket :lang sicp
(define (pascals x y)
  (if (or (= y 1) (= x 0) (= x y))
      1
      (+ (pascals (- x 1) (- y 1))
         (pascals x (- y 1)))))

; From the discord
(define (print-pascals n)
  (define (print-row y)
    (define (print-number x)
      (if (<= x y)
          (begin
            (display (pascals x y))
            (display " ")
            (print-number (+ x 1)))))
    (print-number 0)
    (newline))
  (define (print-all-rows i)
    (if (< i n)
        (begin
          (print-row i)
          (print-all-rows (+ i 1)))))
  (print-all-rows 0))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.13][Exercise 1.13]]

[[https://www.youtube.com/watch?v=sqgpEVzsnF0][Recorded and uploaded to YouTube!]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.14][Exercise 1.14]]

The =count-change= procedure is defined as follows:

#+begin_src racket :lang sicp
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+end_src

TODO: Upload image

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.15][Exercise 1.15]]

a. When =(sine 12.15)= is evaluated, =p= is applied =5= times.

   #+begin_src racket :lang sicp
   (p (sine 4.05))
   (p (p (sine 1.35)))
   (p (p (p (sine 0.45))))
   (p (p (p (p (sine 0.15)))))
   (p (p (p (p (p (sine 0.05))))))
   (p (p (p (p (p 0.05)))))
   #+end_src

b. For any given =angle=, there will be some number of halvings proportional to
   log base 2 of =angle= for a given epsilon (in this case =0.1=). Therefore,
   the procedure grows logarithmically in number of steps, as well as in space
   because each recursive procedure call grows the call stack.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.16][Exercise 1.16]]

As the hint says, we'll use a state variable and the invariant a(b^n). For odd
values of n, we'll turn a(b^n) into (ab)(b^(n-1)).

#+begin_src racket :lang sicp :session :results output :exports both
; Defined in the text
(define (square x) (* x x))

(define (fast-expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter (square b) (/ n 2) a))
        (else (fast-expt-iter b (- n 1) (* a b)))))

(define (fast-expt b n)
  (fast-expt-iter b n 1))

; Tests
(fast-expt 2 4)
(fast-expt 3 100)
#+end_src

#+RESULTS:
: 16
: 515377520732011331036461129765621272702107522001

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.17][Exercise 1.17]]

For binary computers, halving and doubling can be implemented very efficiently
by shifting bits left and right.

(I'm doing this one in Racket because it implements =arithmetic-shift=)

#+begin_src racket :lang racket :session :results output :exports both
(define (double n) (arithmetic-shift n 1)) ; bitwise shift left
(define (halve n) (arithmetic-shift n -1)) ; bitwise shift right

(define (* a b)
  (cond ((= b 0) 0)
        ((= b 1) a)
        ((even? b) (* (double a) (halve b)))
        (else (+ a (* a (- b 1))))))

; Tests
(* 1 1)
(* 3 5)
(* 12 24)
#+end_src

#+RESULTS:
: 1
: 15
: 288

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.18][Exercise 1.18]]

Let's try that trick from 1.16 of introducting the state variable again. We'll
choose the invariant ab + k, which mutates into (2a)(b/2) + k for even b
and a(b-1) + (k+a) for odd b.

#+begin_src racket :lang racket :session :results output :exports both
(define (double n) (arithmetic-shift n 1)) ; bitwise shift left
(define (halve n) (arithmetic-shift n -1)) ; bitwise shift right

(define (fast-mul a b)
  (define (fast-mul-iter a b k)
    (cond ((= b 0) k)
          ((even? b) (fast-mul-iter (double a) (halve b) k))
          (else (fast-mul-iter a (- b 1) (+ k a)))))
  (fast-mul-iter a b 0))

; Tests
(fast-mul 2 2)
(fast-mul 12 13)
(fast-mul 278 34)
#+end_src

#+RESULTS:
: 4
: 156
: 9452

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.19][Exercise 1.19]]

TODO

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.20][Exercise 1.20]]

Let's toss some print statements in there to see what's going on normally.

#+begin_src racket :lang racket  :session  :results output  :exports both
(define (gcd a b)
  (printf "(gcd ~s ~s)~%" a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(gcd 206 40)
#+end_src

#+RESULTS:
: (gcd 206 40)
: (gcd 40 6)
: (gcd 6 4)
: (gcd 4 2)
: (gcd 2 0)
: 2

Now let's try it with normal-order evaluation (by hand).

#+begin_example
(gcd 206 40)
(gcd 40 (remainder 206 40))
(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
... TODO
#+end_example

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.21][Exercise 1.21]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)
#+end_src

#+RESULTS:
: 199
: 1999
: 7


** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.22][Exercise 1.22]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.23][Exercise 1.23]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.24][Exercise 1.24]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.25][Exercise 1.25]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.26][Exercise 1.26]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.27][Exercise 1.27]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.28][Exercise 1.28]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.29][Exercise 1.29]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.30][Exercise 1.30]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.31][Exercise 1.31]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.32][Exercise 1.32]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.33][Exercise 1.33]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.34][Exercise 1.34]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.35][Exercise 1.35]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.36][Exercise 1.36]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.37][Exercise 1.37]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.38][Exercise 1.38]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.39][Exercise 1.39]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.40][Exercise 1.40]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.41][Exercise 1.41]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.42][Exercise 1.42]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.43][Exercise 1.43]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.44][Exercise 1.44]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.45][Exercise 1.45]]
