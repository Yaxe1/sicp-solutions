#+TITLE: Chapter 1 - Build Abstractions with Procedures

* Section 1.1 - The Elements of Programming
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.1][Exercise 1.1]]

#+begin_src racket :lang sicp :session :results output :exports both
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
a
b
19
#f
4
16
6
16
#+end_example

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.2][Exercise 1.2]]
It helps to draw the expression tree out on a sheet of paper.

#+begin_src racket :lang sicp
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.3][Exercise 1.3]]

#+begin_src racket :lang sicp
; Defined in section 1.1.4:
(define (square x) (* x x))
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (sum-of-squares-of-two-largest x y z)
  (cond ((and (>= y x) (>= z x)) (sum-of-squares y z))
        ((and (>= x y) (>= z y)) (sum-of-squares x z))
        ((and (>= x z) (>= y z)) (sum-of-squares x y))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.4][Exercise 1.4]]
The body of this procedure is a combination whose operator is itself an
if-statement. If b > 0, the operator will be "+". Otherwise, it will be "-", in
this way ensuring that a is summed with the absolute value of b.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.5][Exercise 1.5]]
An interpreter using applicative-order evaluation will hang in an infinite
loop, since the arguments to =test= will be evaluated first and =p= is
infinitely recursive.

On the other hand, a normal-order evaluation would evaluate to =0=, because
=p= doesn't get invoked unless the predicate in the =if= statement is false.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.6][Exercise 1.6]]
This new-if procedure is not a special form but rather a procedure call, and
therefore all of the arguments will be evaluated first before they are passed
to =cond=. This means that the predicate is ignored and the new =sqrt-iter=
procedure will call itself recursively forever.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.7][Exercise 1.7]]
"Limited precision" in this context means that we are using a finite amount of
bits to represent a real number with a potentially infinite decimal
representation. IEEE floating point arithmetic is defined as real-number
arithmetic truncated to the closest representable float, introducing errors in
calculations.

#+begin_src racket :lang sicp
(define (square x) (* x x))

(define (average x y)
    (/ (+ x y) 2))

(define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

(define (improve guess x)
    (average guess (/ x guess)))

(define epsilon 1e-10)
(define (good-enough? guess x)
    (< (abs (- guess (improve guess x)))
        (* guess epsilon)))

(define (sqrt x)
    (sqrt-iter 1.0 x))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-10.html#%_thm_1.8][Exercise 1.8]]

#+begin_src racket :lang sicp
(define (square x) (* x x))

(define (cube-root x)
    (cube-root-iter 1.0 x))

(define (cube-root-iter guess x)
    (if (good-enough? guess x)
        guess
        (cube-root-iter (improve guess x) x)))

; From exercise 1.7
(define epsilon 1e-20)
(define (good-enough? guess x)
    (< (abs (- guess (improve guess x)))
        (* guess epsilon)))

(define (improve guess x)
    (/ (+ (/ x (square guess)) (* 2 guess)) 3))
#+end_src

* Section 1.2 - Procedures and the Processes They Generate

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.9][Exercise 1.9]]

#+begin_src racket :lang sicp
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7)
(inc 8)
9

(+ 4 5)
(+ (dec 4) (inc 5))
(+ (dec 3) (inc 6))
(+ (dec 2) (inc 7))
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.10][Exercise 1.10]]

#+begin_src racket :lang sicp
(A 1 10)
; 1024

(A 2 4)
; 65536

(A 3 3)
; 65536

; f(n) = 2n
; g(n) = 2^n
; h(n) = { n = 0: 0; otherwise 2^h(n-1) }
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.11][Exercise 1.11]]

#+begin_src racket :lang sicp
(define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1))
           (* 2 (f (- n 2)))
           (* 3 (f (- n 3))))))
#+end_src

Like in =fib-iter=, we can use variables to keep track of our running state.

#+begin_src racket :lang sicp
(define (g n)
  (define (g-iter i a b c)
    (if (= i n)
        c
        (g-iter (+ i 1) b c (+ c (* 2 b) (* 3 a)))))
  (if (< n 3)
      n
      (g-iter 2 0 1 2)))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.12][Exercise 1.12]]

#+begin_src racket :lang sicp
(define (pascals x y)
  (if (or (= y 1) (= x 0) (= x y))
      1
      (+ (pascals (- x 1) (- y 1))
         (pascals x (- y 1)))))

; From the discord
(define (print-pascals n)
  (define (print-row y)
    (define (print-number x)
      (if (<= x y)
          (begin
            (display (pascals x y))
            (display " ")
            (print-number (+ x 1)))))
    (print-number 0)
    (newline))
  (define (print-all-rows i)
    (if (< i n)
        (begin
          (print-row i)
          (print-all-rows (+ i 1)))))
  (print-all-rows 0))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.13][Exercise 1.13]]

[[https://www.youtube.com/watch?v=sqgpEVzsnF0][Recorded and uploaded to YouTube!]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.14][Exercise 1.14]]

The =count-change= procedure is defined as follows:

#+begin_src racket :lang sicp
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+end_src

TODO: Upload image

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.15][Exercise 1.15]]

a. When =(sine 12.15)= is evaluated, =p= is applied =5= times.

   #+begin_src racket :lang sicp
   (p (sine 4.05))
   (p (p (sine 1.35)))
   (p (p (p (sine 0.45))))
   (p (p (p (p (sine 0.15)))))
   (p (p (p (p (p (sine 0.05))))))
   (p (p (p (p (p 0.05)))))
   #+end_src

b. For any given =angle=, there will be some number of halvings proportional to
   log base 2 of =angle= for a given epsilon (in this case =0.1=). Therefore,
   the procedure grows logarithmically in number of steps, as well as in space
   because each recursive procedure call grows the call stack.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.16][Exercise 1.16]]

As the hint says, we'll use a state variable and the invariant a(b^n). For odd
values of n, we'll turn a(b^n) into (ab)(b^(n-1)).

#+begin_src racket :lang sicp :session :results output :exports both
; Defined in the text
(define (square x) (* x x))

(define (fast-expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter (square b) (/ n 2) a))
        (else (fast-expt-iter b (- n 1) (* a b)))))

(define (fast-expt b n)
  (fast-expt-iter b n 1))

; Tests
(fast-expt 2 4)
(fast-expt 3 100)
#+end_src

#+RESULTS:
: 16
: 515377520732011331036461129765621272702107522001

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.17][Exercise 1.17]]

For binary computers, halving and doubling can be implemented very efficiently
by shifting bits left and right.

(I'm doing this one in Racket because it implements =arithmetic-shift=)

#+begin_src racket :lang racket :session :results output :exports both
(define (double n) (arithmetic-shift n 1)) ; bitwise shift left
(define (halve n) (arithmetic-shift n -1)) ; bitwise shift right

(define (* a b)
  (cond ((= b 0) 0)
        ((= b 1) a)
        ((even? b) (* (double a) (halve b)))
        (else (+ a (* a (- b 1))))))

; Tests
(* 1 1)
(* 3 5)
(* 12 24)
#+end_src

#+RESULTS:
: 1
: 15
: 288

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.18][Exercise 1.18]]

Let's try that trick from 1.16 of introducting the state variable again. We'll
choose the invariant ab + k, which mutates into (2a)(b/2) + k for even b
and a(b-1) + (k+a) for odd b.

#+begin_src racket :lang racket :session :results output :exports both
(define (double n) (arithmetic-shift n 1)) ; bitwise shift left
(define (halve n) (arithmetic-shift n -1)) ; bitwise shift right

(define (fast-mul a b)
  (define (fast-mul-iter a b k)
    (cond ((= b 0) k)
          ((even? b) (fast-mul-iter (double a) (halve b) k))
          (else (fast-mul-iter a (- b 1) (+ k a)))))
  (fast-mul-iter a b 0))

; Tests
(fast-mul 2 2)
(fast-mul 12 13)
(fast-mul 278 34)
#+end_src

#+RESULTS:
: 4
: 156
: 9452

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.19][Exercise 1.19]]

TODO

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.20][Exercise 1.20]]

Let's toss some print statements in there to see what's going on normally.

#+begin_src racket :lang racket  :session  :results output  :exports both
(define (gcd a b)
  (printf "(gcd ~s ~s)~%" a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(gcd 206 40)
#+end_src

#+RESULTS:
: (gcd 206 40)
: (gcd 40 6)
: (gcd 6 4)
: (gcd 4 2)
: (gcd 2 0)
: 2

Now let's try it with normal-order evaluation (by hand).

#+begin_example
(gcd 206 40)
(gcd 40 (remainder 206 40))
(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
... TODO
#+end_example

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.21][Exercise 1.21]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (square x) (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

; Tests
(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)
#+end_src

#+RESULTS:
: 199
: 1999
: 7

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.22][Exercise 1.22]]

#+begin_src racket :lang racket  :session  :results output  :exports both
; From the text
(define (square x) (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

; My solution
(define (runtime) (* (current-inexact-milliseconds) 1000))

(define (search-for-primes start end limit)
  (cond [(or (<= limit 0) (> start end)) '()]
        [(even? start) (search-for-primes (+ start 1) end limit)]
        [(< start 3) (cons start (search-for-primes (+ start 1) end (- limit 1)))]
        [(timed-prime-test start) (cons start (search-for-primes (+ start 2) end (- limit 1)))]
        [else (search-for-primes (+ start 2) end limit)]))

(define (timed-prime-test n)
  (let [(start-time (runtime))]
    (if (prime? n)
        (begin
          (sleep 1e-3) ; Slow my computer down
          (display n)
          (display " -> ")
          (display (- (runtime) start-time))
          (display " μs")
          (newline)
          #t)
        #f)))

; Tests
(search-for-primes 1000 9999 3)
(search-for-primes 10000 99999 3)
(search-for-primes 100000 999999 3)
(search-for-primes 1000000 9999999 3)
#+end_src

#+RESULTS:
#+begin_example
1009 -> 1277.0 μs
1013 -> 1269.0 μs
1019 -> 1270.0 μs
'(1009 1013 1019)
10007 -> 1270.0 μs
10009 -> 1271.0 μs
10037 -> 1268.0 μs
'(10007 10009 10037)
100003 -> 1269.0 μs
100019 -> 1268.0 μs
100043 -> 1269.0 μs
'(100003 100019 100043)
1000003 -> 1275.0 μs
1000033 -> 1275.0 μs
1000037 -> 1272.0 μs
'(1000003 1000033 1000037)
#+end_example

Oddly, this doesn't follow the =sqrt(n)= scaling that the book says we should
expect.

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.23][Exercise 1.23]]

#+begin_src racket :lang sicp  :session  :results output  :exports both

#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.24][Exercise 1.24]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.25][Exercise 1.25]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.26][Exercise 1.26]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.27][Exercise 1.27]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-11.html#%_thm_1.28][Exercise 1.28]]

* Section 1.3 - Formulating Abstractions with Higher-Order Procedures
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.29][Exercise 1.29]]

From [[https://en.wikipedia.org/wiki/Simpson%27s_rule#Composite_Simpson's_1/3_rule][Wikipedia]]:

[[./img/Screenshot 2023-07-30 at 4.44.34 PM.png]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (integral-1 f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (sum-int term i n)
  (if (> i n)
      0
      (+ (term i)
         (sum-int term (+ i 1) n))))

(define (integral-2 f a b n)
  (let [(h (/ (- b a) n))]
    (define (x i) (+ a (* i h)))
    (* 1/3
       h
       (sum-int (lambda (i) (+ (f (x (- (* 2 i) 2)))
                               (* 4 (f (x (- (* 2 i) 1))))
                               (f (x    (* 2 i)))))
            1
            (/ n 2)))))

(define (cube x) (* x x x))

; Tests
(integral-1 cube 0 1 0.01)
(integral-1 cube 0 1 0.001)
(newline)
(integral-2 cube 0 1 100)
(integral-2 cube 0 1 1000)
#+end_src

#+RESULTS:
: 0.24998750000000042
: 0.249999875000001
:
: 1/4
: 1/4


** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.30][Exercise 1.30]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

; Tests
(define (identity x) x)
(define (inc x) (+ x 1))

(sum identity 0 inc 100)
(/ (* 100 101) 2) ; n(n+1)/2
#+end_src

#+RESULTS:
: 5050
: 5050

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.31][Exercise 1.31]]

Part a:

#+begin_src racket :lang sicp  :session  :results output  :exports both

(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))

(define (identity n) n)
(define (increment n) (+ n 1))

(define (factorial n) (product identity 1 increment n))

(define (even i) (* 2 i))
(define (odd i) (+ (* 2 i) 1))

(define (square n) (* n n))

(define (pi n)
  (* 2 (product (lambda (i) (/ (* 4 i i) (- (* 4 i i) 1))) 1 increment n)))

; Tests
(factorial 1)
(factorial 5)
(factorial 30)
(newline)
(exact->inexact (pi 1))
(exact->inexact (pi 10))
(exact->inexact (pi 100))
(exact->inexact (pi 1000))
(exact->inexact (pi 10000))
#+end_src

#+RESULTS:
: 1
: 120
: 265252859812191058636308480000000
:
: 2.6666666666666665
: 3.067703806643499
: 3.1337874906281624
: 3.1408077460303945
: 3.141514118681922

Part b:

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.32][Exercise 1.32]]

Part a:

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result))))
  (iter a null-value))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))
#+end_src

Part b:
#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.33][Exercise 1.33]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (filtered-accumulate combiner null-value term a next b filter)
  (if (> a b)
      null-value
      (if (filter (term a))
          (combiner (term a) (filtered-accumulate combiner null-value term (next a) next b))
          (filtered-accumulate combiner null-value term (next a) next b))))

(define (identity x) x)

(define (sum-of-squared-primes a b)
  (filtered-accumulate + 0 identity a (lambda (n) (if (even? n) (+ n 1) (+ n 2))) b prime?))

; TODO
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.34][Exercise 1.34]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(f f)
(f 2)
(2 2) ; not a valid expression, since 2 is not a procedure
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.35][Exercise 1.35]]

At the fixed point, the equation =x = 1 + 1/x= will be true. Rearranging the
terms, we get =x^2 - x - 1= and use the quadratic formula to solve for x,
which ends up being =(1 ± sqrt(5))/2=.

Computing this value with =fixed-point=, we get:

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let [(next (f guess))]
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
#+end_src

#+RESULTS:
: 1.6180327868852458

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.36][Exercise 1.36]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let [(next (f guess))]
      (display next)
      (newline)
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average x y) (/ (+ x y) 2))

(display "Without average damping")
(newline)
(fixed-point (lambda (x) (/ (log 1000) (log x))) 4)
(newline)
(display "With average damping")
(newline)
(fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 4)
#+end_src

#+RESULTS:
#+begin_example
Without average damping
4.9828921423310435
4.301189432497896
4.734933901055578
4.442378437719526
4.632377941509958
4.505830646780212
4.588735606875766
4.533824356566501
4.56993352418142
4.546075272637246
4.561789745175654
4.55141783665413
4.5582542120702625
4.553744140202578
4.556717747893265
4.554756404545319
4.5560497413912975
4.5551967522618035
4.555759257615811
4.555388284933278
4.555632929754932
4.555471588998784
4.555577989320218
4.555507819903776
4.555554095154945
4.555523577416557
4.555543703263474
4.555530430629037
4.555539183677709
4.555539183677709

With average damping
4.491446071165521
4.544974650975552
4.553746974742814
4.555231425802502
4.555483906560562
4.5555268862194875
4.5555342036887705
4.5555342036887705
#+end_example

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.37][Exercise 1.37]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.38][Exercise 1.38]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.39][Exercise 1.39]]
** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.40][Exercise 1.40]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
; From the text
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))

(define (deriv g)
  (define dx 0.00001)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))

(define (fixed-point f first-guess)
  (define tolerance 0.00001)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let [(next (f guess))]
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (cubic a b c)
  (lambda (x)
    (+ (* x x x) (* a x x) (* b x) c)))

(newtons-method (cubic 1 2 3) 1)
#+end_src

#+RESULTS:
: -1.2756822036498454

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.41][Exercise 1.41]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (double f)
  (lambda (x) (f (f x))))

(((double (double double)) inc) 5)
#+end_src

#+RESULTS:
: 21

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.42][Exercise 1.42]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (compose f g)
  (lambda (x) (f (g x))))
#+end_src

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.43][Exercise 1.43]]

#+begin_src racket :lang sicp  :session  :results output  :exports both
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (square x) (* x x))
((repeated square 2) 5)
#+end_src

#+RESULTS:
: 625

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.44][Exercise 1.44]]

#+begin_src racket :lang sicp  :session  :results output  :exports both

(define (average . args) ; using variadic arguments so I don't have to rewrite
  (define (iter args sum count)
    (if (null? args)
        (if (= count 0)
            0
            (/ sum count))
        (iter (cdr args) (+ sum (car args)) (+ count 1))))
  (iter args 0 0))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (smooth f)
  (define dx 0.00001)
  (lambda (x) (average (f (- x dx)) (f x) (f (+ x dx)))))

(define (n-fold-smooth f n)
  (repeated smooth n))
#+end_src

#+RESULTS:

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.45][Exercise 1.45]]

** [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book-Z-H-12.html#%_thm_1.46][Exercise 1.46]]
